import React, { useEffect, useState } from 'react';
import { Routes, Route, useNavigate, Navigate } from 'react-router-dom';
import ProtectRoute from '../Router/'; // ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ
import DefaultLayout from '../layout/DefaultLayout';
import BlankLayout from '../layout/BlankLayout';
import Loader from '../common/Loader';

import { useSelector, useDispatch } from 'react-redux';
import { RootState } from '../app/store';

// üîπ Import JSON Routes
import routesData from './routes.json';
import SignIn from '../pages/Authentication/SignIn';
import Dashboard from '../pages/Dashboard/Dashboard';
import Profile from '../pages/Profile';
import PageTitle from '../components/PageTitle';
import PageAceess from '../pages/PageAceess';
import { verifyToken } from '../hooks/vertifytoken';

const componentsMap: { [key: string]: React.ElementType } = {
  SignIn,
  Dashboard,
  Profile,
  PageAceess,
};

const layoutMap: { [key: string]: React.ElementType } = {
  DefaultLayout,
  BlankLayout,
};

const AppRoutes = ({ loading }: { loading: boolean }) => {
  const navigate = useNavigate();
  const [checkingAuth, setCheckingAuth] = useState(true);
  const token = sessionStorage.getItem('token') || false;
  console.log(token);
  const isAuthenticated = useSelector(
    (state: RootState) => state.auth.isAuthenticated,
  );
  const dispatch = useDispatch();
  useEffect(() => {
    const checkVerify = async () => {
      const isValid = await verifyToken(dispatch, token);
      setCheckingAuth(false);
      if (isValid) {
        navigate(window.location.pathname || '/', { replace: true }); // ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ pathname ‡πÉ‡∏´‡πâ‡πÑ‡∏õ‡∏ó‡∏µ‡πà "/"
        // console.log("isvaid",isValid)
      }
    };
    if (token) {
      checkVerify(); // ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠ isAuthenticated === true
    } else {
      setCheckingAuth(false); // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà authenticated ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏≠ token
    }
  }, [navigate, verifyToken, dispatch, window.location.pathname]);

  if (loading || checkingAuth) return <Loader />;
  if (!isAuthenticated) {
    // ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô ‡πÅ‡∏•‡∏∞‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà /signin ‚Üí ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤ SignIn
    return window.location.pathname === '/login' ? (
      <SignIn />
    ) : (
      <Navigate to="/login" replace />
    );
  }

  // ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏ï‡πà‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤ /signin ‚Üí ‡πÉ‡∏´‡πâ Redirect ‡πÑ‡∏õ Dashboard (/)
  if (isAuthenticated && window.location.pathname === '/login') {
    return <Navigate to="/" replace />;
  }
  return (
    <Routes>
      {routesData.map(
        ({ path, element, layout, title, protected: isProtected }) => {
          const Component = componentsMap[element] || PageAceess; // ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏û‡∏ö Component ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ PageAceess
          const Layout = layout ? layoutMap[layout] : React.Fragment; // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Layout ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ä‡πâ React.Fragment

          const RouteElement = (
            <Layout>
              {title && <PageTitle title={title} />}
              <Component />
            </Layout>
          );

          return (
            <Route
              key={path}
              path={path}
              element={
                isProtected ? (
                  <ProtectRoute>{RouteElement}</ProtectRoute>
                ) : (
                  RouteElement
                )
              }
            />
          );
        },
      )}
    </Routes>
  );
};

export default AppRoutes;
